#ifndef ERRORS_H
#define ERRORS_H

#include "global.h"

#define ERRORS_NUMBER	60


typedef enum _error_codes {
	AFFECTATION_SYMBOL_EXPECTED_ERROR, //0
	ASSIGNEMENT_OR_PROCEDURE_CALL_END_STATEMENT_ERROR,
	CHARACTER_EXPECTED_ERROR,
	CLOSE_PARENTHESIS_TOKEN_ERROR,
	CONDITION_ERROR, //5
	DEUXPOINTS_ERROR,
    EXPRESSION_ERROR,
	IDENTIFIER_EXPECTED_ERROR,
	SYMBOL_NOT_FOUND_ERROR,
	IF_EXPECTED_ERROR,//10
	PF_EXPECTED_ERROR,
	PO_EXPECTED_ERROR,
	SEQUENCE_STATEMENT_ERROR,
	SINGLE_QUOTE_DOUBLE_QUOTE_EXPECTED_ERROR,
	UNRECOGNIZED_CHARACTER_ERROR,//15
	DEUXPOINT_EXPECTED_ERROR,
	SYMBOL_EXISTS_ERROR,
	SYMBOL_DONT_EXIST,
	ASSIGNEMENT_TO_CONST_ERROR,
	INTEGER_EXPECTED_ERROR,//20
	IN_EXPECTED_ERROR,
    WHILE_EXPECTED_ERROR,
    OCB_EXPECTED_ERROR,
    CCB_EXPECTED_ERROR,
    FOR_EXPECTED_ERROR,//25
    ID_OR_NUM_EXPECTED_ERROR,
    REPEAT_EXPECTED_ERROR,
	COND_EXPECTED,
	SEQ_STAT_EXPECTED,
	REL_EXPECTED,
	SIMPLE_EXP_EXPECTED,
	ADDINGOP_EXPECTED,
	TERM_EXPECTED,
	MULTI_EXPECTED,
	FACTOR_EXPECTED,
	VECT_EXPECTED,
	VECT_FUNCT_EXPECTED,
	ARG_SEQ_EXPECTED,
	STRING_TOKEN_EXPECTED,
	BOOLEAN_EXPECTED,
	ARGUMENT_ERROR,





} error_code;

int current_line;
void raise_error(error_code);

 #endif
